/*****************************************************************************
* lab2a.c for Lab2A of ECE 153a at UCSB
* Date of the Last Update:  October 23,2014
*****************************************************************************/

#define AO_LAB2A

#include "qpn_port.h"
#include "bsp.h"
#include "chromatic_tuner.h"
#include "lcd.h"
#include "qpn_port.h"
#include "bsp.h"
#include "xintc.h"
#include "xil_exception.h"
#include "xparameters.h"
#include "xtmrctr.h"
#include "xtmrctr_l.h"
#include "xgpio.h" 		// LED driver, used for General purpose I/i
#include "xspi.h"
#include "xspi_l.h"
#include "fft.h"
#include "note.h"
#include "stream_grabber.h"
#include "trig.h"
#include "xtmrctr.h"

#define SAMPLES 512 // AXI4 Streaming Data FIFO has size 512
#define M 7 //2^m=samples
#define CLOCK 100000000.0 //clock speed

int int_buffer[SAMPLES/4];
static float q[SAMPLES/4];
static float q_next[SAMPLES/4];
static float w[SAMPLES/4];

void read_fsl_values(float* q, int n) {
   int i;
   unsigned int x;
//   stream_grabber_start();
//   stream_grabber_wait_enough_samples(512);
   stream_grabber_wait_enough_samples(1);
   int index = 0;
   for(i = 0; i < n; i = i + 4) {
      int_buffer[index] = (stream_grabber_read_sample(i) + stream_grabber_read_sample(i + 1) + stream_grabber_read_sample(i+2) + stream_grabber_read_sample(i+3))/4;
    		  //stream_grabber_read_sample(i+4) + stream_grabber_read_sample(i+5) + stream_grabber_read_sample(i+6) + stream_grabber_read_sample(i+7))/8;
	   //int_buffer[index] = stream_grabber_read_sample(i);
      // xil_printf("%d\n",int_buffer[i]);
      x = int_buffer[index];

     asm("flt  %0, %1;"
            "fmul %0, %0, %2;"
            "addi %0, %0, -0xF000000;"
               : "=r" (q[index])
               : "r" (x), "r" (0x40533333)
     );
     index++;
      //q[i] = 3.3/67108864.0*x;
      //q[i] = 3.3*x/67108864.0; // 3.3V and 2^26 bit precision. NEED TO USE INLINE ASSEMBLY FOR THIS, subtract 26 from exponent bits & mul by float in assembly

   }

   /*for(i = 0; i < n * 8; i+=8) {
         int_buffer[i/8] = stream_grabber_read_sample(i);
         x = int_buffer[i/8];
         q[i/8] = 3.3*x/67108864.0; // 3.3V and 2^26 bit precision.
   }*/
}

char* arr[5] = {"1", "2", "3", "4", "5"};
extern XTmrCtr tmr;

typedef struct Lab2ATag  {               //Lab2A State machine
	QActive super;
	short prev_vol;
	short volume;
	short mode;
	short vol_ticks_till_timeout;
	short mode_ticks_till_timeout;
	short mode_idle;
}  Lab2A;
int Volume_Idle = 1;

/* Setup state machines */
/**********************************************************************/
static QState LCD_initial (Lab2A *me);
static QState LCD_on      (Lab2A *me);
static QState LCD_Active  (Lab2A *me);
static QState LCD_Idle  (Lab2A *me);
static QState Menu (Lab2A *me);
static QState OverTuner(Lab2A *me);
static QState OverA4Value(Lab2A *me);
static QState OverOctave(Lab2A *me);
static QState OverHistogram(Lab2A *me);
static QState Tuner (Lab2A *me);
static QState A4Value (Lab2A *me);
static QState Octave (Lab2A *me);
static QState Histogram(Lab2A *me);



/**********************************************************************/


Lab2A AO_Lab2A;


void LCD_ctor(void)  {
	Lab2A *me = &AO_Lab2A;
	me->prev_vol = 0;
	me->volume = 0;
	me->mode = 1;
	me->vol_ticks_till_timeout = 12;
	me->mode_ticks_till_timeout = 16;
	me->mode_idle = 1;
	QActive_ctor(&me->super, (QStateHandler)&LCD_initial);
}


QState LCD_initial(Lab2A *me) {
//	xil_printf("\n\rInitialization");
    return Q_TRAN(&LCD_on);
}

QState LCD_on(Lab2A *me) {
//	xil_printf("Signal (On): %d\r\n", Q_SIG(me));
	switch (Q_SIG(me)) {
		case Q_ENTRY_SIG: {
//			xil_printf("\n\rOn");
		}

		case Q_INIT_SIG: {
			return Q_TRAN(&Menu);
		}
	}

	return Q_SUPER(&QHsm_top);
}

QState Menu(Lab2A *me) {
	switch (Q_SIG(me)) {
		case Q_ENTRY_SIG: {
			return Q_TRAN(&OverTuner);
		}
		case Q_INIT_SIG: {
			drawMenu(0, 0, 240, 320);
			return Q_TRAN(&OverTuner);
		}
		case Q_EXIT_SIG: {
			return Q_HANDLED();
		}
	}
	return Q_SUPER(&LCD_on);

}

QState OverTuner(Lab2A *me) {
	switch (Q_SIG(me)) {
		case Q_ENTRY_SIG: {
			printText(">", 15, 110);
			return Q_HANDLED();
		}
		case ENCODER_UP: {
			return Q_TRAN(&OverHistogram);
		}
		case ENCODER_DOWN: {
			return Q_TRAN(&OverA4Value);
		}
		case Q_EXIT_SIG: {
			clrArrow();
			return Q_HANDLED();
		}
		case ENCODER_CLICK: {
			return Q_TRAN(&Tuner);
		}
	}
	return Q_SUPER(&Menu);
}

QState OverA4Value(Lab2A *me) {
	switch (Q_SIG(me)) {
		case Q_ENTRY_SIG: {
			printText(">", 15, 140);
			return Q_HANDLED();
		}
		case ENCODER_UP: {
			return Q_TRAN(&OverTuner);
		}
		case ENCODER_DOWN: {
			return Q_TRAN(&OverOctave);
		}
		case ENCODER_CLICK: {
			return Q_TRAN(&A4Value);
		}
		case Q_EXIT_SIG: {
			clrArrow();
			return Q_HANDLED();
		}
	}
	return Q_SUPER(&Menu);
}

QState OverOctave(Lab2A *me) {
	switch (Q_SIG(me)) {
		case Q_ENTRY_SIG: {
			return Q_HANDLED();
		}
		case Q_INIT_SIG: {
			printText(">", 15, 170);
			return Q_HANDLED();
		}
		case ENCODER_UP: {
			return Q_TRAN(&OverA4Value);
		}
		case ENCODER_DOWN: {
			return Q_TRAN(&OverHistogram);
		}
		case ENCODER_CLICK: {
			return Q_TRAN(&Octave);
		}
		case Q_EXIT_SIG: {
			clrArrow();
			return Q_HANDLED();
		}
	}
	return Q_SUPER(&Menu);
}

QState OverHistogram(Lab2A *me) {
	switch (Q_SIG(me)) {
		case Q_ENTRY_SIG: {
			printText(">", 15, 200);
			return Q_HANDLED();
		}
		case ENCODER_UP: {
			return Q_TRAN(&OverOctave);
		}
		case ENCODER_DOWN: {
			return Q_TRAN(&OverTuner);
		}
		case ENCODER_CLICK: {
			return Q_TRAN(&Histogram);
		}
		case Q_EXIT_SIG: {
			clrArrow();
			return Q_HANDLED();
		}
	}
	return Q_SUPER(&Menu);
}

int size;
XTmrCtr timer;
QState Tuner (Lab2A *me){
	switch (Q_SIG(me)){
		case Q_ENTRY_SIG: {
			clrScr();
			printText("Tuner", 50, 170);
	//		//xil_printf("Inside Tuner");
//			XTmrCtr_Initialize(&timer, XPAR_AXI_TIMER_0_DEVICE_ID);
//			uint32_t Control = XTmrCtr_GetOptions(&timer, 0) | XTC_CAPTURE_MODE_OPTION | XTC_INT_MODE_OPTION;
//			XTmrCtr_SetOptions(&timer, 0, Control);
			stream_grabber_start();
			read_fsl_values(q, SAMPLES);
			size = sizeof(q) / sizeof(q[0]);
			return Q_HANDLED();
		}
		case MODE1: {
			return Q_TRAN(&Menu);
		}
		case Q_EXIT_SIG: {
			return Q_HANDLED();
		}
		default:
			stream_grabber_start();
			float sample_f = 48828.125;
			for(int l=0;l<size;l++)
				w[l]=0;
			float frequency = fft(q, w, SAMPLES/4, M, sample_f/4);
			read_fsl_values(q_next, SAMPLES);
			for (int i = 0; i < SAMPLES / 4; i++) {
				q[i] = q_next[i];
			}

			//ignore noise below set frequency
			//if(frequency > 200.0) {
			findNote(frequency, &timer); //stop timer in findNote
			xil_printf("frequency: %d Hz\r\n", (int)(frequency+.5));

			//get time to run program
			int ticks=XTmrCtr_GetValue(&timer, 0);
			XTmrCtr_Stop(&timer, 0);
			float tot_time=ticks/CLOCK;
			xil_printf("program time: %dms \r\n",(int)(1000*tot_time));
			return Q_HANDLED();
	}

	return Q_SUPER(&Menu);
}

QState A4Value (Lab2A *me) {
	switch (Q_SIG(me)) {
		case Q_ENTRY_SIG:
			clrScr();
			printText("A4 Value", 50, 170);
			return Q_HANDLED();
		case MODE1:
			return Q_TRAN(&Menu);
		case Q_EXIT_SIG:
			return Q_HANDLED();
	}
	return Q_SUPER(&Menu);
}
QState Octave (Lab2A *me) {
	switch (Q_SIG(me)) {
		case Q_ENTRY_SIG:
			clrScr();
			printText("Octave", 50, 170);
			return Q_HANDLED();
		case MODE1:
			return Q_TRAN(&Menu);
		case Q_EXIT_SIG:
			return Q_HANDLED();
	}
	return Q_SUPER(&Menu);
}
QState Histogram(Lab2A *me) {
	switch (Q_SIG(me)) {
		case Q_ENTRY_SIG:
			clrScr();
			printText("Histogram", 50, 170);
			return Q_HANDLED();
		case MODE1:
			return Q_TRAN(&Menu);
		case Q_EXIT_SIG:
			return Q_HANDLED();
	}
	return Q_SUPER(&Menu);
}


