#include "fft.h"
#include "complex.h"
#include "trig.h"

#define SAMPLE_SIZE 512

static float new_[SAMPLE_SIZE];
static float new_im[SAMPLE_SIZE];

extern float sinLUT[256][9];
extern float cosLUT[256][9];

struct complex_f {
    float r;
    float im;

} complex_f;


void ffti_shuffle_f(int data[], unsigned log2_N)
{


    unsigned N = 1 << log2_N;   /* N */
    unsigned Nd2 = N >> 1;      /* N/2 = number range midpoint */
    unsigned Nm1 = N - 1;       /* N-1 = digit mask */
    unsigned i;                 /* index for array elements */
    unsigned j;                 /* index for next element swap location */

    for (i = 0, j = 0; i < N; i++) {
        if (j > i) {
            int tmp = data[i];
            data[i] = data[j];
            data[j] = tmp;
        }



        unsigned lszb = ~i & (i + 1);



        unsigned mszb = Nd2 / lszb;



        unsigned bits = Nm1 & ~(mszb - 1);
        j ^= bits;
    }
}



float fft(float* q, float* w, int n, int m, float sample_f) {
	int a,b,r,d,e,c;
	int k,place;
	a=n>>1; //wtf
	b=1;
	int i,j;
	float real=0,imagine=0;
	float max,frequency;

	int temp;

	/*flipArray(q, SAMPLE_SIZE);
	flipArray(w, SAMPLE_SIZE);

	for (int i = 0; i < SAMPLE_SIZE; i++) {
		new_[i] = q[i];
		new_im[i] = w[i];
	}*/


	// ORdering algorithm
	for(i=0; i<(m-1); i++){
		d=0;
		for (j=0; j<b; j++){
			for (c=0; c<a; c++){	
				e=c+d;
				new_[e]=q[(c<<1)+d];
				new_im[e]=w[(c<<1)+d];
				new_[e+a]=q[(c<<1)+1+d];
				new_im[e+a]=w[(c<<1)+1+d];
			}
			d+=(n/b);
		}		
		for (r=0; r<n;r++){
			q[r]=new_[r];
			w[r]=new_im[r];
		}
		b=b<<1;
		a=n/(b<<1);
	}
	//end ordering algorithm

	b=1;
	k=0;
	// m = 9, n = 512
	for (j=0; j<m; j++){
	//MATH
		for(i=0; i<n; i+=2){
			if (i%(n>>(int)log2(b))==0 && i!=0)
				k++;
			real=mult_real(q[i+1], w[i+1], cosLUT[k][(int) log2(b)], sinLUT[k][(int) log2(b)]);	  //need to use LUT for sine and cosine
			imagine=mult_im(q[i+1], w[i+1], cosLUT[k][(int) log2(b)], sinLUT[k][(int) log2(b)]);

			//real=mult_real(q[i+1], w[i+1], cosine(-PI*k/b), sine(-PI*k/b));	  //need to use LUT for sine and cosine
			//imagine=mult_im(q[i+1], w[i+1], cosine(-PI*k/b), sine(-PI*k/b));
			new_[i]=q[i]+real;
			new_im[i]=w[i]+imagine;
			new_[i+1]=q[i]-real;
			new_im[i+1]=w[i]-imagine;

		}
		for (i=0; i<n; i++){
			q[i]=new_[i];
			w[i]=new_im[i];
		}
	//END MATH

	//REORDER
		for (i=0; i<n>>1; i++){
			new_[i]=q[i<<1];
			new_[i+(n>>1)]=q[(i<<1)+1];
			new_im[i]=w[i<<1];
			new_im[i+(n>>1)]=w[(i<<1)+1];
		}
		for (i=0; i<n; i++){
			q[i]=new_[i];
			w[i]=new_im[i];
		}
	//END REORDER	
		b=b<<1;
		k=0;		
	}

	//find magnitudes
	max=0;
	place=1;
	for(i=1;i<(n>>1);i++) {
		new_[i]=q[i]*q[i]+w[i]*w[i];
		if(max < new_[i]) {
			max=new_[i];
			place=i;
		}
	}
	
	float s=sample_f/n; //spacing of bins
	
	frequency = (sample_f/n)*place;

	//curve fitting for more accuarcy
	//assumes parabolic shape and uses three point to find the shift in the parabola
	//using the equation y=A(x-x0)^2+C
	float y1=new_[place-1],y2=new_[place],y3=new_[place+1];
	float x0=s+(2*s*(y2-y1))/(2*y2-y1-y3);
	x0=x0/s-1;
	
	if(x0 <0 || x0 > 2) { //error
		return 0;
	}
	if(x0 <= 1)  {
		frequency=frequency-(1-x0)*s;
	}
	else {
		frequency=frequency+(x0-1)*s;
	}
	
	return frequency;
}

/*
 * float newfft(Complex* a, int n, float sample_f) {
	if (n <= 1) {
		return;
	}

	// Split the array into even and odd parts
	Complex* a_even = malloc((n / 2) * sizeof(Complex));
	Complex* a_odd = malloc((n / 2) * sizeof(Complex));

	for (int i = 0; i < n / 2; i++) {
		a_even[i] = a[2 * i];
		a_odd[i] = a[2 * i + 1];
	}

	// Recursively compute FFT for even and odd parts
	newfft(a_even, n / 2, sample_f);
	newfft(a_odd, n / 2, sample_f);

	// Combine the results
	for (int i = 0; i < n / 2; i++) {
		double angle = -2.0 * PI * i / n;
		double real_part = cos(angle);
		double imag_part = sin(angle);

		Complex t = {
				real_part * a_odd[i].real - imag_part * a_odd[i].imag,
	            real_part * a_odd[i].imag + imag_part * a_odd[i].real
		};

		a[i].real = a_even[i].real + t.real;
		a[i].imag = a_even[i].imag + t.imag;
		a[i + n / 2].real = a_even[i].real - t.real;
		a[i + n / 2].imag = a_even[i].imag - t.imag;
	}

	//find magnitudes
		float max=0;
		int place=1;
		for(int i = 1; i < (n>>1); i++) {
			a[i].real = a[i].real * a[i].real + a[i].imag * a[i].imag;
			if(max < a[i].real) {
				max=a[i].real;
				place=i;
			}
		}

		float s = sample_f/n; //spacing of bins

		float frequency = (sample_f/n) * place;

		//curve fitting for more accuarcy
		//assumes parabolic shape and uses three point to find the shift in the parabola
		//using the equation y=A(x-x0)^2+C
		/*(float y1=a[place-1].real, y2=a[place].real, y3 = a[place+1].real;
		float x0= s + (2 * s * (y2 - y1))/(2 * y2 - y1 -y3);
		x0 = x0 / s - 1;

		if(x0 <0 || x0 > 2) { //error
			return 0;
		}
		if(x0 <= 1)  {
			frequency=frequency-(1-x0)*s;
		}
		else {
			frequency=frequency+(x0-1)*s;
		}

		free(a_even);
		free(a_odd);
		return frequency;


}
 *
 */
